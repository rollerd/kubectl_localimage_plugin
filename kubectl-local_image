#!/bin/bash

# Create pod with init container to install docker image
create_reciever() {
  local image_name=$1
  local image_tag=$2
  local pod_name=$3
  local namespace=$4
  local pod_command=$5
  local pod_args=${@:6:4}

  echo "Creating pod $pod_name"

  if [[ "${pod_command}" == "" ]];then
    cat <<EOF | $KUBECTL apply -f -
    apiVersion: v1
    kind: Pod
    metadata:
      name: ${pod_name}
      namespace: $namespace
    spec:
      initContainers:
      - name: init
        image: docker:20.10.12
        imagePullPolicy: IfNotPresent
        command:
        - sh
        args:
        - -c
        - until docker images | grep $image_name\\.*$image_tag;do sleep 1;done
        volumeMounts:
        - name: dockersock
          mountPath: /var/run/docker.sock
      containers:
      - name: ${pod_name}
        image: $image_name:$image_tag
        imagePullPolicy: Never
      volumes:
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock
      terminationGracePeriodSeconds: 10
EOF
  else
    cat <<EOF | $KUBECTL apply -f -
    apiVersion: v1
    kind: Pod
    metadata:
      name: ${pod_name}
      namespace: $namespace
    spec:
      initContainers:
      - name: init
        image: docker:20.10.12
        imagePullPolicy: IfNotPresent
        command:
        - sh
        args:
        - -c
        - until docker images | grep $image_name\\.*$image_tag;do sleep 1;done
        volumeMounts:
        - name: dockersock
          mountPath: /var/run/docker.sock
      containers:
      - name: $pod_name
        image: $image_name:$image_tag
        imagePullPolicy: Never
        command:
        - $pod_command
        args:
        - "$pod_args"
      volumes:
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock
      terminationGracePeriodSeconds: 10
EOF
  fi
}

# Save local docker image as tar file
docker_save_image() {
  echo "Saving docker image $1:$2 to file"
  docker save -o /tmp/kubelocalimage.tar "$1:$2"
  if [[ $? -ne 0 ]]; then
    echo "Unable to save image: $1:$2 - check that it exists"
    exit 1
  fi
}

# Copy local tar file image to init container
push_image() {
  echo "Copying docker image tar file to init container"
  sleep 5
  $KUBECTL cp /tmp/kubelocalimage.tar -c init ${1}:./ > /dev/null 2>&1
}

# Load tar file image into kube node local registry via init container
docker_load_image() {
  echo "Loading image to registry via init pod"
  $KUBECTL exec -c init ${1} -- docker load -i kubelocalimage.tar > /dev/null 2>&1
}

# Script usage
usage() {
  local SELF
  SELF="local-image"
  if [[ "$(basename "$0")" == kubectl-* ]]; then # invoked as plugin
    SELF="kubectl local-image"
  fi

  cat <<EOF
USAGE:
  $SELF [OPTIONS] <IMAGE:TAG> <POD_NAME> [POD COMMAND]     : run local image:tag image in pod_name using pod_command(optional)
  $SELF -n [NAMESPACE]                                     : deploy pod to specified namespace
  $SELF -h,--help                                          : show this message
EOF
}

# main() function
main() {
  if [[ -z "${KUBECTL:-}" ]]; then
    if hash kubectl 2>/dev/null; then
      KUBECTL=kubectl
    elif hash kubectl.exe  2>/dev/null; then
      KUBECTL=kubectl.exe
    else
      echo >&2 "kubectl is not installed"
      exit 1
    fi
  fi

  POSITIONAL_ARGS=()
  
  while [[ $# -gt 0 ]]; do
    case $1 in
      -n|--namespace)
        NAMESPACE="$2"
        shift # past argument
        shift # past value
        ;;
      -h)
		usage
        shift # past argument
        ;;
      -*|--*)
        echo "Unknown option $1"
		usage
        exit 1
        ;;
      *)
        POSITIONAL_ARGS+=("$1") # save positional arg
        shift # past argument
        ;;
    esac
  done

  if [[ "${#POSITIONAL_ARGS[@]}" -lt 2 ]]; then
    echo "Missing required args:"
    usage
    exit 1
  fi

  image_full="${POSITIONAL_ARGS[0]}"
  pod_name="${POSITIONAL_ARGS[1]}"
  pod_command="${POSITIONAL_ARGS[2]}"
  pod_args="${POSITIONAL_ARGS[@]:3:4}"

  imageArr=(${image_full//:/ })
  image_name=${imageArr[0]}
  image_tag=${imageArr[1]}

  if [[ $image_tag == "" ]];then
    image_tag="latest"
  fi

  docker_save_image "$image_name" "$image_tag"
  create_reciever "$image_name" "$image_tag" "${pod_name}" "${NAMESPACE}" "${pod_command}" "${pod_args}"
  push_image "${pod_name}"
  docker_load_image "${pod_name}"

  echo "${pod_name} pod is now running!"
}

main "$@"
